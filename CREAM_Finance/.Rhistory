PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="rf", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)),  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
test$type=PREDICTION_FULL
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
inTrain = createDataPartition(y=train_v2$type, p=1.00, list = FALSE)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
inTrain = createDataPartition(y=train_v2$type, p=0.8, list = FALSE)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$mult/Train_v3$rotting_flesh
control <- trainControl(method="cv", number=10, repeats=5)
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
inTrain = createDataPartition(y=train_v2$type, p=0.8, list = FALSE)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
control <- trainControl(method="cv", number=10, repeats=5)
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
inTrain = createDataPartition(y=train_v2$type, p=0.8, list = FALSE)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
control <- trainControl(method="cv", number=10, repeats=5)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)), n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
inTrain = createDataPartition(y=train_v2$type, p=0.8, list = FALSE)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
control <- trainControl(method="cv", number=10, repeats=5)
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_3 = Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
range
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="rf", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)), n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_33 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_33 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_34 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=3000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_34 = Train_v3$mult4*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult4*Test_v3$mult3*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_44 = Train_v3$mult4*Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_44 = Test_v3$mult4*Test_v3$mult4*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)), n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)), n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="nnet", preProcess="range", trControl=control,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="nnet", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], method="knn", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
?rfeControl
?train
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="ROC", method="knn", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
control <- trainControl(method="cv", number=10, repeats=5, classProbs = TRUE)
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="ROC", method="knn", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="ROC", method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="Accuracy", method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)], metric="Accuracy", method="nnet", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1)],  method="nnet", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="knn", preProcess="range", trControl=control, tuneLength=10,  n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
PREDICTION_FULL = predict(model_RF_FULL, newdata=test[,-c(1,6)])
test$mult = test$hair_length*test$has_soul
test$mult2 = test$hair_length*test$has_soul/test$rotting_flesh
test$mult3 = test$hair_length*test$has_soul*test$bone_length
test$mult4 = test$hair_length*test$has_soul*test$bone_length/test$rotting_flesh
test$mult4_2 = test$mult4*test$mult4
test$mult4_3 = test$mult3*test$mult3
test$mult4_33 = test$mult3*test$mult3*test$mult3
test$mult4_44 = test$mult4*test$mult4*test$mult4
test$mult4_3 = test$mult4_2*test$mult4_2/test$rotting_flesh
test$mult4_4 = test$mult4*test$mult4/test$rotting_flesh
test$mult3_2 = test$mult3*test$mult3
PREDICTION_FULL = predict(model_RF_FULL, newdata=test[,-c(1,6)])
inTrain = createDataPartition(y=train_v2$type, p=0.8, list = FALSE)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
control <- trainControl(method="cv", number=10, repeats=5, classProbs = TRUE)
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_3 = Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_33 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_33 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_44 = Train_v3$mult4*Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_44 = Test_v3$mult4*Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
control <- trainControl(method="cv", number=10, repeats=5, classProbs = TRUE)
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_3 = Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_33 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_33 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_44 = Train_v3$mult4*Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_44 = Test_v3$mult4*Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_34 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
Train_v3$mult4_34 = Train_v3$mult4*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult4*Test_v3$mult3*Test_v3$mult4
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
hist(Train_v3$has_soul, col=Train_v3$type)
hist(Train_v3$has_soul, col=Train_v3$type, breaks = 100)
hist(Train_v3["type"=="Ghost"]$has_soul,  breaks = 100)
hist(Train_v3[Train_v3$type=="Ghost"]$has_soul,  breaks = 100)
hist(Train_v3[Train_v3$type=="Ghost",]$has_soul,  breaks = 100)
hist(Train_v3[Train_v3$type=="Ghoul",]$has_soul,  breaks = 100)
hist(Train_v3[Train_v3$type=="Goblin",]$has_soul,  breaks = 100)
hist(Train_v3$bone_length, col=Train_v3$type, breaks = 100)
hist(Train_v3$hair_length, col=Train_v3$type, breaks = 100)
hist(Train_v3$color, col=Train_v3$type, breaks = 100)
hist(Train_v3$rotting_flesh, col=Train_v3$type, breaks = 100)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="nnet", preProcess="range", trControl=control, tuneLength=2,  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)], metric="Accuracy",  method="gbm", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="svm", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="SVMRadial", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="SVM", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="glm", preProcess="range", trControl=control,   n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=control,  metric = "ROC", n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="svmRadial", preProcess="range", trControl=control,  metric = "ROC", n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="svmRadial", preProcess="range", trControl=control, tuneLength=10, metric = "ROC", n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v3[,-c(1,6)])
confusionMatrix(PREDICTION_FULL,Test_v3[,"type"])
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10,
## Estimate class probabilities
classProbs = TRUE,
## Evaluate performance using
## the following function
summaryFunction = twoClassSummary)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=fitCcontrol,  tuneGrid=gbmGrid, n.tree=200, maxit=2000)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=fitControl,  tuneGrid=gbmGrid, n.tree=200, maxit=2000)
gbmGrid <-  expand.grid(interaction.depth = c(1, 5, 9),
n.trees = (1:30)*50,
shrinkage = 0.1,
n.minobsinnode = 20)
model_RF_FULL = train(type~., data=Train_v3[,-c(1,6)],  method="gbm", preProcess="range", trControl=fitControl,  tuneGrid=gbmGrid, n.tree=200, maxit=2000)
correlationMatrix <- cor(train)
library(mlbench)
correlationMatrix <- cor(train)
correlationMatrix <- cor(Train_v3)
correlationMatrix <- cor(Train_v3[,-c(1,6)])
correlationMatrix <- cor(Train_v3[,-c(1,6,7)])
print(correlationMatrix)
correlationMatrix <- cor(train[,-c(1,6,7)])
print(correlationMatrix)
featurePlot(x=train, y=train$type, plot="pairs")
library(rpart)
my_tree_two <- rpart(type ~., data = train, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
my_tree_two <- rpart(type ~., data = Train_v3, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
Train_v3 = train_v2[inTrain,]
Test_v3 = train_v2[-inTrain,]
Train_v3$mult = Train_v3$hair_length*Train_v3$has_soul
Train_v3$mult2 = Train_v3$hair_length*Train_v3$has_soul/Train_v3$rotting_flesh
Train_v3$mult3 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length
Train_v3$mult4 = Train_v3$hair_length*Train_v3$has_soul*Train_v3$bone_length/Train_v3$rotting_flesh
Test_v3$mult = Test_v3$hair_length*Test_v3$has_soul
Test_v3$mult2 = Test_v3$hair_length*Test_v3$has_soul/Test_v3$rotting_flesh
Test_v3$mult3 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length
Test_v3$mult4 = Test_v3$hair_length*Test_v3$has_soul*Test_v3$bone_length/Test_v3$rotting_flesh
Train_v3$mult4_2 = Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_2 = Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_3 = Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_33 = Train_v3$mult3*Train_v3$mult3*Train_v3$mult3
Test_v3$mult4_33 = Test_v3$mult3*Test_v3$mult3*Test_v3$mult3
Train_v3$mult4_34 = Train_v3$mult4*Train_v3$mult3*Train_v3$mult4
Test_v3$mult4_34 = Test_v3$mult4*Test_v3$mult3*Test_v3$mult4
Train_v3$mult4_44 = Train_v3$mult4*Train_v3$mult4*Train_v3$mult4
Test_v3$mult4_44 = Test_v3$mult4*Test_v3$mult4*Test_v3$mult4
Train_v3$mult4_3 = Train_v3$mult4_2*Train_v3$mult4_2/Train_v3$rotting_flesh
Test_v3$mult4_3 = Test_v3$mult4_2*Test_v3$mult4_2/Test_v3$rotting_flesh
Train_v3$mult4_4 = Train_v3$mult4*Train_v3$mult4/Train_v3$rotting_flesh
Test_v3$mult4_4 = Test_v3$mult4*Test_v3$mult4/Test_v3$rotting_flesh
Train_v3$mult3_2 = Train_v3$mult3*Train_v3$mult3
Test_v3$mult3_2 = Test_v3$mult3*Test_v3$mult3
correlationMatrix <- cor(Train_v3[,-c(1,6,7)])
print(correlationMatrix)
featurePlot(x=train, y=Train_v3$type, plot="pairs")
featurePlot(x=Train_v3, y=Train_v3$type, plot="pairs")
print(correlationMatrix)
nearzero <- nearZeroVar(Train_v3, saveMetrics = TRUE)
nearzero
features_corr <- findCorrelation(cor(Train_v3[,-c(6,7)]), cutoff=0.4)
features_corr
names(Train_v3[, -c(6,7)])[features_corr]
Train_v4 = Train_v3[,-features_corr]
View(Train_v4)
my_tree_two <- rpart(type ~., data = Train_v4, method = "class")
str(Train_v4)
View(Train_v3)
Train_v4 = cbind(Train_v3[,-features_corr],Train_v3$color,Train_v3$type)
str(Train_v4)
?cbind
Train_v4 = cbind(Train_v3[,-features_corr],Train_v3$color,Train_v3$type, deparse.level = 0)
str(Train_v4)
Train_v4$color = Train_v3$color
Train_v4$type = Train_v3$type
str(Train_v4)
Train_v4 = Train_v3[,-features_corr]
Train_v4$color = Train_v3$color
Train_v4$type = Train_v3$type
str(Train_v4)
#rpart attempts
library(rpart)
my_tree_two <- rpart(type ~., data = Train_v4, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(my_tree_two)
?fancyRpartPlot
model_RF_FULL = train(type~., data=Train_v4[,-c(1,8)],  method="nnet", preProcess="range", trControl=control, tuneLength=3,  n.tree=200, maxit=2000)
Test_v4 = Test_v3[,-features_corr]
Test_v4$color = Test_v3$color
View(Test_v4)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v4[,-c(1,8)])
confusionMatrix(PREDICTION_FULL,Test_v4[,"type"])
Test_v4$type = Test_v3$type
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v4[,-c(1,8)])
confusionMatrix(PREDICTION_FULL,Test_v4[,"type"])
model_RF_FULL = train(type~., data=Train_v4[,-c(1,8)],  method="rf", preProcess="range", trControl=control, tuneGrid = expand.grid(.mtry = c(2:6)),  n.tree=200, maxit=2000)
PREDICTION_FULL = predict(model_RF_FULL, newdata=Test_v4[,-c(1,8)])
confusionMatrix(PREDICTION_FULL,Test_v4[,"type"])
library(data.table)
library(xgboost)
library(Matrix)
library(MASS)
library(mxnet) # there is no package called ‘mxnet’
install.packages("mxnet")
?data.frame
library(doParallel); library(parallel)
cores=detectCores()-1
clust = makeCluster(cores)
registerDoParallel(clust)
library(caret); library(kernlab); library(ISLR); library(RANN);library("plyr");
library(DMwR);library(MASS); library(randomForest); library(rpart);
library(httr);library(iptools)
library(iptools)
library("CORElearn")
library(xml2)
library(scrapeR)
library(RCulr)
library(XML)
library(cluster)
library(graphics)
library(ggplot2)
net_info = "https://stat.ripe.net/data/network-info/data.json?resource"
as_info = "https://stat.ripe.net/data/as-overview/data.json?resource"
geoloc_info = "https://stat.ripe.net/data/geoloc/data.json?resource"
ip_api_com_url = "http://ip-api.com/json"
reverse_IP = function(IP)
{
reversed_IP = system(paste("dig -x",IP,"| egrep '^;.*PTR$' | cut -c 2-", sep = ""),
intern = TRUE, ignore.stderr = TRUE)
ifelse(ip_classify(as.character(IP)) == "IPv6",gsub("ip6\\.arpa\\.\\s+IN\\s+PTR.*$", "", reversed_IP, ignore.case = TRUE),
gsub("in-addr\\.arpa\\.\\s+IN\\s+PTR.*$","", reversed_IP, ignore.case = TRUE))
}
RBL_AAA_resolver = function(df,source)
{
command = "host "
if(source == "rf.senderbase.org"){command = paste(command, "-t txt ")}
dns_query = paste(command, reverse_IP(df$ipaddress), source, " ns1.proline.net.ua", sep="")
dns_response = system(dns_query, intern = TRUE)
print(paste("ID:",df$id,"IP:",df$ipaddress,
"city:",df$city, "target:",df$target,
"response:", dns_response[6]))
return(dns_response[6])
}
getAS = function(url,x){
paste(url,x,sep="=")
}
mirror_IP_API_COM = function(url,x){
paste(url,x,sep="/")
}
strip_rbl_response = function(x)
{
grep(".+has address.+(127\\.0\\.0\\.[0-9]{1,3}).*", x, ignore.case = TRUE, value = FALSE)
}
setwd("Schreibtisch/Data_Science_ROOT/JOB-Interviews/CREAM_Finance/")
train_v2_RIPE = read.csv(file="train_v2_IP_RIPE2.csv", header = TRUE, stringsAsFactors = TRUE, fill=TRUE, sep = ';', na.strings = c(""))
RR = train_v2_RIPE
eee =t(RR)
str(eee)
View(eee)
?t
rownames(RR)=as.character(train_v2_RIPE$ipaddress)
rownames(RR)=as.character(train_v2_RIPE$id)
str(RR)
head(RR)
RR = train_v2_RIPE
head(RR)
rownames(RR)=as.character(2*train_v2_RIPE$id)
head(RR)
eee = t(RR)
str(eee)
eee = as.data.frame(eee)
str(eee)
summary(train_v2_RIPE)
